// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.




#include "BouffeurAvant.h"
#include "../RobotMap.h"
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES
#include "../Commands/BSpinAvant.h"
// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS
// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

double BouffeurAvant::potMax(0);
double BouffeurAvant::potMin(0);
double BouffeurAvant::potLoad(0);


BouffeurAvant::BouffeurAvant() : Subsystem("BouffeurAvant") {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    spin = RobotMap::bouffeurAvantspin;
    monte = RobotMap::bouffeurAvantmonte;
    pot = RobotMap::bouffeurAvantpot;
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    isGoingUp = false;
}

void BouffeurAvant::InitDefaultCommand() {
    // Set the default command for a subsystem here.
    // SetDefaultCommand(new MySpecialCommand());
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        SetDefaultCommand(new BSpinAvant());
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
}

void BouffeurAvant::Up() {
	monte->Set(0.25);
}

void BouffeurAvant::Down() {
	monte->Set(-0.25);
}

void BouffeurAvant::Stop() {
	monte->Set(0);
}

void BouffeurAvant::SetLoad() {
	if (pot->Get() > potLoad){
		monte->Set(-0.25);
		isGoingUp = false;
	}
	else if (pot->Get() < potLoad) {
		monte->Set(0.25);
		isGoingUp = true;
	}
}

void BouffeurAvant::Spin() {
	spin->Set(0.5);
}

void BouffeurAvant::StopSpin() {
	spin->Set(0);
}

bool BouffeurAvant::MaxAtteint() {
	return pot->Get() >= potMax;
}

bool BouffeurAvant::MinAtteint() {
	return pot->Get() <= potMin;
}

bool BouffeurAvant::IsLoaded() {
	return isGoingUp == (pot->Get() >= potLoad);
}

double BouffeurAvant::GetPot() {
	return pot->Get();
}
// Put methods for controlling this subsystem
// here. Call these from Commands.

