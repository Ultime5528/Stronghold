// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.




#include "Catapulte.h"
#include "../RobotMap.h"
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES
#include "../Commands/CLoad.h"
// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS
// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

Catapulte::Catapulte() : Subsystem("Catapulte") {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    shoot = RobotMap::catapulteshoot;
    conv = RobotMap::catapulteconv;
    monte = RobotMap::catapultemonte;
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    m_loaded = false;
    m_reaching = false;
    m_isGoingUp = false;
    m_setpoint = false;
    double Catapulte::potMax(0);
    double Catapulte::potMin(0);
    double Catapulte::potLoad(0);
}

void Catapulte::InitDefaultCommand() {
    // Set the default command for a subsystem here.
    // SetDefaultCommand(new MySpecialCommand());
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        SetDefaultCommand(new CLoad());
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
}

    void Catapulte::SetAtMax() {

    }
	void Catapulte::SetAtMin() {

	}
	void Catapulte::Reach() {
		if(!HasReached()) {

			m_reaching = true;

			if (pot->Get() > m_setpoint){
				Down();
				m_isGoingUp = false;
			}
			else  {
				Up();
					m_isGoingUp = true;
			}



			}
	}
	void Catapulte::Stay() {

	}
	void Catapulte::ConvToBack() {

	}
	void Catapulte::ConvToFront() {

	}
	void Catapulte::ConvThrow() {

	}
	void Catapulte::Up() {

		if (pot->Get() >= potMax) {
				Stop();
			}
			else  {
				monte->Set(0.25);
			}
	}
	void Catapulte::Down()
	{
		if (pot->Get() <= potMin) {
				Stop();
			}
			else  {
				monte->Set(-0.25);
			}
	}
	void Catapulte::Stop() {
		monte->Set(0);
			m_reaching = false;
	}
	bool Catapulte::HasReached() {
		if (m_reaching) {
				return m_isGoingUp == (pot->Get() >= m_setpoint);
			}

			else {
				return (pot->Get() < m_setpoint + 0.02) && (pot->Get() > m_setpoint - 0.02);
			}

	}
	bool Catapulte::IsLoaded(){
		return false;
	}
// Put methods for controlling this subsystem
// here. Call these from Commands.

