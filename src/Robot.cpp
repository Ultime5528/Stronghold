	// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#include "Robot.h"
#include "Commands/Viser.h"

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INITIALIZATION
std::shared_ptr<Catapulte> Robot::catapulte;
std::shared_ptr<BouffeurAvant> Robot::bouffeurAvant;
std::shared_ptr<RouesPivot> Robot::rouesPivot;
std::shared_ptr<BasePilotable> Robot::basePilotable;

std::shared_ptr<Camera> Robot::camera;
std::shared_ptr<Shooter> Robot::shooter;

std::unique_ptr<OI> Robot::oi;
// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INITIALIZATION



void Robot::RobotInit() {
	RobotMap::init();

    catapulte.reset(new Catapulte());
    bouffeurAvant.reset(new BouffeurAvant());
    rouesPivot.reset(new RouesPivot());
    basePilotable.reset(new BasePilotable());

	camera.reset(new Camera());
	shooter.reset(new Shooter());

	oi.reset(new OI());

	autonomousCommand.reset(new Autonomous());
  }

/**
 * This function is called when the disabled button is hit.
 * You can use it to reset subsystems before shutting down.
 */
void Robot::DisabledInit(){
	Scheduler::GetInstance()->RemoveAll();
	Robot::shooter->StopSpin();
	Robot::shooter->StopConv();
}

void Robot::DisabledPeriodic() {
	Scheduler::GetInstance()->Run();
}

void Robot::AutonomousInit() {

	GetPreferences();

	if (autonomousCommand.get() != nullptr)
		autonomousCommand->Start();
}

void Robot::AutonomousPeriodic() {
	Scheduler::GetInstance()->Run();
}

void Robot::TeleopInit() {
	// This makes sure that the autonomous stops running when
	// teleop starts running. If you want the autonomous to
	// continue until interrupted by another command, remove
	// these lines or comment it out.
	if (autonomousCommand.get() != nullptr)
		autonomousCommand->Cancel();
/*
	BouffeurAvant::potMax = prefs->GetDouble("MaximumAvant", 0.34);
	BouffeurAvant::potMin = prefs->GetDouble("MinimumAvant", 0);

	Catapulte::potMax = prefs->GetDouble("MaximumCatapulte", 0.4);
	Catapulte::potMin = prefs->GetDouble("MinimumCatapulte", 0.275);
	Catapulte::potShoot = prefs->GetDouble("ShootCatapulte", 0.280);*/

	GetPreferences();

	Robot::basePilotable->GyroReset();

}

void Robot::TeleopPeriodic() {
	Scheduler::GetInstance()->Run();

	SmartDashboard::PutNumber("Gyro", Robot::basePilotable->GetGyroAngle());

}

void Robot::TestPeriodic() {
	lw->Run();
}

void Robot::GetPreferences() {

	Preferences* prefs = Preferences::GetInstance();

	Camera::hueMin = prefs->GetDouble("hueMin", 44);
	Camera::hueMax = prefs->GetDouble("hueMax", 137);
	Camera::satMin = prefs->GetDouble("satMin", 156);
	Camera::satMax = prefs->GetDouble("satMax", 255);
	Camera::valMin = prefs->GetDouble("valMin", 140);
	Camera::valMax = prefs->GetDouble("valMax", 231);
	Camera::aireMin = prefs->GetDouble("aireMin", 200);

	Viser::TARGET_H = prefs->GetDouble("target_h", 0.2);
	Viser::TARGET_H_OFFSET = prefs->GetDouble("target_h_offset", 0.02);
	Viser::TARGET_X = prefs->GetDouble("target_x", 0.2);
	Viser::TARGET_X_OFFSET = prefs->GetDouble("target_x_offset", 0.1);

	Viser::FORWARD_P = prefs->GetDouble("forward_p", 0.0);
	Viser::FORWARD_I = prefs->GetDouble("forward_i", 0.0);;
	Viser::FORWARD_D = prefs->GetDouble("forward_d", 0.0);;

	Viser::ROTATE_P = prefs->GetDouble("rotate_p", 0.0);
	Viser::ROTATE_I = prefs->GetDouble("rotate_i", 0.0);
	Viser::ROTATE_D = prefs->GetDouble("rotate_d", 0.0);

	DriverStation::ReportError("GetPreferences");

}

START_ROBOT_CLASS(Robot);

