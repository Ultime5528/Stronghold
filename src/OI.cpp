// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#include "OI.h"

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES
#include "SmartDashboard/SmartDashboard.h"
#include "Commands/Autonomous.h"
#include "Commands/Avancer.h"
#include "Commands/BDescendAvant.h"
#include "Commands/BMonteAvant.h"
#include "Commands/BSpinAvant.h"
#include "Commands/CLoad.h"
#include "Commands/CShoot.h"
#include "Commands/CUnload.h"
#include "Commands/PMonte.h"
#include "Commands/PRetract.h"
#include "Commands/Pilotage.h"
#include "Commands/Tourner.h"
#include "Commands/Unload.h"
#include "Commands/AutomaticCapture.h"
#include "Commands/Load.h"
#include "Commands/BSetBas.h"
#include "Commands/BSetLoad.h"
#include "Subsystems/BouffeurAvant.h"
#include "Commands/BSetBas.h"
#include "Commands/BSetHaut.h"
#include "Commands/CSetShoot.h"
#include "Commands/CSetBas.h"
#include "Commands/CSetLoad.h"
#include "Commands/Shoot.h"
#include "Commands/Viser.h"
#include "Commands/TakeBoulder.h"
#include "Commands/BStopSpinAvant.h"
#include "Commands/Reset.h"
#include "Commands/DoubleViser.h"
#include "Commands/BSpinBack.h"
#include "Commands/AutomaticCapture.h"
#include "Commands/Viser.h"

// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES

OI::OI() {
    // Process operator interface input here.
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    stick.reset(new Joystick(0));
    gamepad.reset(new Joystick(1));

    SmartDashboard::PutData(Scheduler::GetInstance());


    SmartDashboard::PutData("Start Cam", new AutomaticCapture());
    SmartDashboard::PutData("Start Viser", new Viser());


    button1.reset(new JoystickButton(stick.get(), 1));
    button2.reset(new JoystickButton(stick.get(), 2));
    button3.reset(new JoystickButton(stick.get(), 3));
    button4.reset(new JoystickButton(stick.get(), 4));
    button5.reset(new JoystickButton(stick.get(), 5));
    button6.reset(new JoystickButton(stick.get(), 6));
    button9.reset(new JoystickButton(stick.get(), 9));
    button10.reset(new JoystickButton(stick.get(), 10));
    button11.reset(new JoystickButton(stick.get(), 11));
    button12.reset(new JoystickButton(stick.get(), 12));



    buttonG1.reset(new JoystickButton(gamepad.get(), 1));
    buttonG2.reset(new JoystickButton(gamepad.get(), 2));
    buttonG3.reset(new JoystickButton(gamepad.get(), 3));
    buttonG4.reset(new JoystickButton(gamepad.get(), 4));
    buttonG6.reset(new JoystickButton(gamepad.get(), 6));
    buttonG7.reset(new JoystickButton(gamepad.get(), 7));
    buttonG8.reset(new JoystickButton(gamepad.get(), 8));

    button1->WhenPressed(new TakeBoulder());
    button2->WhenPressed(new BSetHaut(false)); //haut sans spin, 3.5s
    //button3->WhenPressed(new PRetract());
    //button4->WhenPressed(new PMonte());
    button3->WhenPressed(new AutomaticCapture());
    button4->WhenPressed(new Viser());
    button5->WhileHeld(new BSetBas());
    button6->WhileHeld(new BSetHaut());


    button11->WhenPressed(new BStopSpinAvant());

    button12->WhenPressed(new BSpinBack());
    button10->WhenPressed(new BSpinAvant());



    buttonG1->WhenPressed(new CSetBas(true));
    buttonG2->WhenPressed(new CSetShoot(true));
    //buttonG3->WhenPressed(new DoubleViser());
    buttonG3->WhenPressed(new Load());

    buttonG4->WhenPressed(new Shoot());

    //buttonG6->WhenPressed(new Load());
    buttonG7->WhenPressed(new Reset());
    buttonG8->WhenPressed(new Pilotage());


}

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS

std::shared_ptr<Joystick> OI::getStick() {
   return stick;
}

// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
